Файл помощи библиотеки FastExt 1.17 для Блиц3Д




	Форум: http://blitz.pp.ru/forum/showthread.php?s=&threadid=3177
	Официальный сайт: http://www.fastlibs.com
	(c) 2006-2008 Автор и правообладатель MixailV aka Monster^Sage [monster-sage@mail.ru]



	Внимание! Используйте библиотеку FastExt только с Blitz3D 1.98, 1.99, 1.100, 1.101, 1.103, 1.105, 1.106 !




Библиотека предназначена для значительного расширения функциональности Блица.
С помощью FastExt можно легко и просто использовать продвинутое мультитекстурирование,
создать отличную и быструю воду, быстрые постпроцесс эффекты, преломляющие объектв, а также
простые проекционные тени. Применив воображение вы создадите много быстрых и красивых эффектов в обычном Блице.




История разработки:

 v1.17
 - Теперь библиотека может работать в Blitz3D 1.106
 - Новая ShadowUpdate в модуле мульти-теней ShadowsMultiple.bb. Подробнее читайте в FastExt_Help_Rus.txt.

 v1.16.1
 - Добавлен новый функционал для функции TextureAnisotropy + новый пример FastExt_Example_TextureFiltering.bb
   (отключение фильтрации текстур, 2 режима).

 v1.16
 - Теперь библиотека может работать в Blitz3D v1.105

 v1.15.1
 - Устранена проблема функций HideShadowCaster, HideShadowReceiver в теневой системе (объекты не скрывались);
 - Устранена очередная проблема твининга и проведена некоторая оптимизация в теневой системе;
 - Добавлен новый полезный аргумент showAlways% в функции CreateShadowCaster и AttachShadowReceiver,
	читайте подробнее в Shadows_Help_Rus.txt и смотрите в примере ShadowsSimple_TweenOther.bb
 - Добавлена новая функция GroupChange, подробнее см. далее.


 v1.15
 - Новая функция ShadowsBlur, может работать в любом режиме теневой системы. И пример ShadowsSimple_PostBlur.bb (с изменениями);
 - Новый постпроцесс эффект - 'GodRays' и новые функции CustomPostprocessRays, CustomPostprocessRaysEx + пример FastExt_PostprocessRays.bb
 - Новый красивый пример ShadowsSimple_FakeRay.bb (персональное спасибо Filax'у);
 - не забудьте обновить dll, decls и подключаемые файлы!

 v1.14
 - теперь библиотека может работать в Blitz3D v1.101 и v1.103
 - добавлены новые функции для рендеринга - RenderGroup, GroupAttach, GroupDetach, GroupFind, ClearGroup and ClearGroups
 - добавлен новый постпроцесс эффект "Posterize" (для тестирования) + пример FastExt_PostprocessPosterize.bb
 - добавлены новые режимы качества (2 и 3) для постпроцесс эффектов: Blur, BlurDirectional, BlurSpin.
 - оптимизирована работа функции SetBuffer, а также внесены поправки для более корректной работы до вызова
   функции RenderWorld и устранена зависимость от этой функции;
 - переработаны фреймворки для создания теней:
	- теперь нет проблем с твинингом, пример ShadowsSimple_Tween.bb;
	- решена проблема с EntityAutoFade для кастеров;
	- устранен конфликт с постпроцесс-эффектом FE_BLURMOTION
	- можно добавить объект, как ресивер, чтобы избежать неправильных теней
	  при пересечении кастеров и ресивера, пример ShadowsSimple_ReceiversUse.bb;
	- можно использовать упрощенную низкополигональную модель для отбрасывания теней (LOD)
	  и повышения ФПС в приложении, и это будет работать автоматически, пример ShadowsSimple_LOD.bb; 
	- новая возможность создавать тени от Spot-источника света, пример ShadowsSimple_SpotLight.bb;
	- новый пример ShadowsMultiple_IncreaseRangeTrick.bb, показывающий как увеличить теневую область
	  за счет использования двух теневых систем одновременно от одного источника света.

 v1.13
 - добавлена система прожективных теней
 - добавлены новые примеры:
	ShadowsSimple_Demo.bb 
	ShadowsSimple_FadeOut.bb
	ShadowsSimple_NoiseBlur.bb
	ShadowsMultiple_Demo.bb
	ShadowsMultiple_FadeOut.bb
	ShadowsMultiple_NoiseBlur.bb
	ShadowsMultiple_TrickForPlatformers.bb
 - добавлен новый простой постпроцесс эффект "Оверлей" + пример FastExt_PostprocessAll.bb
 - не забудьте обновить dll, decls и подключаемые файлы!

 v1.12
 - добавлено много быстрых постпроцесс эффектов (DepthOfField, Glow, Blur, Inverse,
   	Grayscale, Contrast, DirectionalBlur, ZoomBlur, SpinBlur, MotionBlur)
 - аналогично добавлены примеры ко всем постпроцесс эффектам:
	FastExt_PostprocessAll.bb
	FastExt_PostprocessDOF.bb
	FastExt_PostprocessGlow.bb
	FastExt_PostprocessGlowEx.bb
	FastExt_PostprocessBlur.bb
	FastExt_PostprocessBlurDirectional.bb
	FastExt_PostprocessBlurSpin.bb
	FastExt_PostprocessBlurZoom.bb
	FastExt_PostprocessBlurMotion.bb
	FastExt_PostprocessContrast.bb
	FastExt_PostprocessGrayscale.bb
	FastExt_PostprocessInverse.bb 
 - добавлена функция BumpPower
 - не забудьте обновить FastExt.decls файл!

 v1.11
 - добавлена поддержка рендеринга в кубемап-текстуру
 - добавлена поддержка копирования в/из кубемап текстуру (с помошью функции CopyRectStretch)
 - добавлены новые примеры:
	FastExt_Example_RenderCubemap.bb
	FastExt_Example_BumpEffects.bb

 v1.1
 - добавлены функции RenderEntity и RenderEntityLight + пример FastExt_Example_RenderEntity.bb
 - добавлены функции FogMode и FogDensity для создания продвинутого тумана + пример FastExt_Example_FogModeAndDensity.bb
 - добавлены функции TextureAnisotropy и TextureLodBias для использования анизитропии текстур и управления уровнем детализации
   + пример FastExt_Example_AnisotropyAndLodBias.bb
 - добавлен получение свойства видеокарты GfxDriverCapsEx\AnisotropyMax - максимального уровня анизитропии текстур
 - добавлена функция DeInitExt для очистки библиотеки перед сменой графического разрешения
 - добавлена функция ExecAndExit, см. хелп ниже
 - добавлены новые примеры FastExt_Example_ChangeResolution.bb и FastExt_Example_ChangeResolutionOther.bb

 v1.00
 - первый официальный релиз библиотеки
 - добавлен хелп на английском
 - добавлена новая функция SetCubeAlign для кубемап-текстур
	+ новые примеры FastExt_Example_CubemapAlign.bb и FastExt_Example_CubemapLightAlign.bb
 - произведены некоторые оптимизации

 v0.16 beta
 - исправлен баг команды EntityFX
 - переписан алгоритм для проекции текстур, спасибо за тестирование товарищу MoKa,
   теперь проекционные текстуры (вода) ложаться правильно на всех NVidia видеокартах
   (на ATI проблем не было изначально).
 - все смешивания (TextureBlend, EntityBlend, BrushBlend) можно настроить, используя
   напрямую флаги ДиректИкс. Смотрите вспомогательные функции TextureBlendCustom,
   EntityBlendCustom, BrushBlendCustom.
 - флаг проекции в команде TextureBlend можно использовать опционально с любым блендингом.
 - дописаны примеры воды
 - реализована полная поддержка совместной работы с библиотекой FastImage
 - создан данный хелп

 v0.15 alpha
 - первый релиз библиотеки




* ГЛАВНЫЕ ФУНКЦИИ:

InitExt% ()
	Главная команда библиотеки, следует запускать после команды Graphics3D.
	Возвращает еденицу, если библиотека подключилась удачно. Ноль, если
	версия блица не 1.98 и не 1.99.


DeInitExt% ()
	Функция используется для очистки библиотеки перед сменой видео-разрешения.
	Используйте строго перед командами ClearWorld и EndGraphics!
	Пример использования: FastExt_Example_ChangeResolution.bb




* ФУНКЦИИ ДЛЯ ПОСТПРОЦЕСС ЭФФЕКТОВ:

RenderPostprocess% (flags%=0, x%=0, y%=0, width%=0, height%=0)
	Функция рендерит постпроцесс эффект в текущий буффер (BackBuffer или TextureBuffer) по правилам:
		1. Функция рендерит постпроцесс эффекты в BackBuffer без любых ограничений.
		2. Вы можете рендерить постпроцесс эффекты в TextureBuffer только для
		   текстур, созданных с флагами 256+FE_RENDER (исключая эффект "глубина резкости" или "DepthOfField")
		3. Эффект DepthOfField может быть отрендерен в TextureBuffer только для текстуры,
		   созданной с флагами 256+FE_ZRENDER и имеющей размеры BackBuffer, то есть ширина текстуры должна
		   быть равна GraphicsWidth() и высота равны GraphicsHeight()
	Используйте функцию только после RenderWorld для "DepthOfField" эффекта,
	остальные эффекты можно рендерить в любом месте программы (конечно после функций Graphics3D & InitExt).
	flags% - одна или несколько постпроцесс констант, объеденяемых оператором "Or", ниже список возможных:
		FE_DOF = 1		- эффект глубины резкости "DepthOfField"
		FE_Glow = 2		- эффект свечения ярких частей картинки
		FE_Blur = 4		- эффект размытия
		FE_Inverse = 8		- инверсирование картинки
		FE_Grayscale = 16	- черно-белый эффект
		FE_Contrast = 32	- эффект повышения контрастности
		FE_BlurDirectional = 64	- размытие в заданном направлении
		FE_BlurZoom = 128	- размытие "увеличения/уменьшения"
		FE_BlurSpin = 256	- радиальное размытие
		FE_BlurMotion = 512	- размытие движения
		FE_Overlay = 1024	- простое наложение квада
		
		[ Как пример, для одновременного использования двух эффектов (DepthOfField и Glow)
		  нужен следующий код: RenderPostprocess FE_DOF Or FE_Glow ]

        x%, y%, width%, height% - пока не используются, зарезервированы для следующих версий библиотеки
	Пример использования: FastExt_PostprocessAll.bb


CustomPostprocessDOF% (near#=10.0, far#=100.0, direction%=1, level%=3, blurRadius#=0.35, quality%=1)
	Настройка параметров постпроцесс эффекта "Depth Of Field".
	Эффект будет работать корректно ТОЛЬКО когда вьюпорт последней камеры имеет
	следующие размеры CameraViewport YourCamera,0,0,GraphicsWidth(),GraphicsHeight()
	near# - дистанция перед камерой, откуда эффект начинает работать
	far# - дистанция перед камерой, где эффект заканчивает работу
	direction% - направление эффекта; 0-размываются объекты перед камерой, 1-объекты размываются в дали
	level% - количество плоскостей для размытия (больше число, большее размытие и качество, но более медленно)
	blurRadius# - задает радиус размытия для каждой плоскости эффекта
	quality% - качество размытия (0-низкой, 1-высокое)
	Пример использования: FastExt_PostprocessDOF.bb


CustomPostprocessGlow% (alpha#=1.0, darkPasses%=2, blurPasses%=4, blurRadius#=0.35, quality%=1, red%=255, green%=255, blue%=255, alphaTexture%=0)
	Настройка параметров постпроцесс эффекта Glow (Bloom)
	alpha# - непрозрачность эффекта, минимальное значение 0 - полностью прозрачный, 1 - полностью НЕпрозрачный
	darkPasses% - кол-во затемняющих проходов:
		0 - максимальное свечение, светится все что можно :)
		2 и более - светятся только яркие части изображения
	blurPasses% - кол-во размывающих проходов (больше кол-во, выше качество и сила размытия, но более медленно)
	blurRadius# - задает радиус размытия
	quality% - качество размытия (значения только от 0 до 3)
		0 и 1 - очень быстрый метод, возможны артефакты на некоторых видеокартах (0 - нормальное качество, 1 - высокое качество)
		2 и 3 - более медленный метод, гарантированно без артефактов, а также может работать быстрее на некоторых видеокартах (2 - нормальное качество, 3 - высокое качество)
        red%, green%, blue% - цветовой оттенок эффекта, заничения 0...255 (как в функции BrushColor)
        alphaTexture% - текстура с альфа-каналом (загруженная с флагом 2) для дополнительной/частичной настройки прозрачности эффекта
	Пример использования: FastExt_PostprocessGlow.bb


CustomPostprocessGlowEx% (lightPasses%, lightMethod%)
	Настройка дополнительных параметров для постпроцесс эффекта Glow (Bloom)
	lightPasses% - количество осветляющих проходов (0-отключено, 6-максимальное осветление)
	lightMethod% - метод наложения для осветления, возможные значения от 0 до 5:
		0 - MODULATE (бленд как в Blitz3D)
		1 - MODULATE2X
		2 - MODULATE4X
		3 - ADDSIGNED
		4 - ADDSIGNED2X
		5 - ADD (бленд как в Blitz3D)
	Example of use: FastExt_PostprocessGlowEx.bb


CustomPostprocessBlur% (alpha#=1.0, blurPasses%=4, blurRadius#=0.35, quality%=1, red%=255, green%=255, blue%=255, alphaTexture%=0)
	Настройка параметров постпроцесс эффекта Blur
	alpha# - непрозрачность эффекта, минимальное значение 0 - полностью прозрачный, 1 - полностью НЕпрозрачный
	blurPasses% - кол-во размывающих проходов (больше кол-во, выше качество и сила размытия, но более медленно)
	blurRadius# - задает радиус размытия
	quality% - качество размытия (значения только от 0 до 3)
		0 и 1 - очень быстрый метод, возможны артефакты на некоторых видеокартах (0 - нормальное качество, 1 - высокое качество)
		2 и 3 - более медленный метод, гарантированно без артефактов, а также может работать быстрее на некоторых видеокартах (2 - нормальное качество, 3 - высокое качество)
        red%, green%, blue% - цветовой оттенок эффекта, заничения 0...255 (как в функции BrushColor)
        alphaTexture% - текстура с альфа-каналом (загруженная с флагом 2) для дополнительной/частичной настройки прозрачности эффекта
	Пример использования: FastExt_PostprocessBlur.bb


CustomPostprocessInverse% (alpha#=1.0, red%=255, green%=255, blue%=255, alphaTexture%=0)
	Настройка параметров постпроцесс эффекта инверсии "Inverse".
	alpha# - непрозрачность эффекта, минимальное значение 0 - полностью прозрачный, 1 - полностью НЕпрозрачный
        red%, green%, blue% - цветовой оттенок эффекта, заничения 0...255 (как в функции BrushColor)
        alphaTexture% - текстура с альфа-каналом (загруженная с флагом 2) для дополнительной/частичной настройки прозрачности эффекта
	Пример использования: FastExt_PostprocessBlur.bb


CustomPostprocessGrayscale% (alpha#=1.0, brightness#=1.0, inverse%=0, alphaTexture%=0)
	Настройка параметров черно-белого эффекта "Grayscale".
	alpha# - непрозрачность эффекта, минимальное значение 0 - полностью прозрачный, 1 - полностью НЕпрозрачный
	brightness# - яркость черно-белого эффекта (0 - максимально контрастно, 1 - более светло)
	inverse% -   1 - инвертировать результат эффекта, 0 - без инверсии
        alphaTexture% - текстура с альфа-каналом (загруженная с флагом 2) для дополнительной/частичной настройки прозрачности эффекта
	Пример использования: FastExt_PostprocessGrayscale.bb


CustomPostprocessContrast% (alpha#=1.0, method%=0, red%=255, green%=255, blue%=255, alphaTexture%=0)
	Настройка параметров постпроцесс эффекта контрастности "Contrast".
	alpha# - непрозрачность эффекта, минимальное значение 0 - полностью прозрачный, 1 - полностью НЕпрозрачный
	method% - возможные значения от 0 до 5
		0 - MODULATE blend (как Blitz blend)
		1 - MODULATE2X
		2 - MODULATE4X
		3 - ADDSIGNED
		4 - ADDSIGNED2X
		5 - ADD  (как Blitz blend)
        red%, green%, blue% - цветовой оттенок эффекта, заничения 0...255 (как в функции BrushColor)
        alphaTexture% - текстура с альфа-каналом (загруженная с флагом 2) для дополнительной/частичной настройки прозрачности эффекта
	Пример использования: FastExt_PostprocessContrast.bb


CustomPostprocessBlurDirectional% (angle#=0, alpha#=1, blurPasses%=4, blurRadius#=0.35, quality%=1, red%=255, green%=255, blue%=255, alphaTexture%=0)
	Настройка параметров постпроцесс эффекта направленного размытия "Directional Blur".
	angle# - угол направления для размытия (в градусах)
	alpha# - непрозрачность эффекта, минимальное значение 0 - полностью прозрачный, 1 - полностью НЕпрозрачный
	blurPasses% - кол-во размывающих проходов (больше кол-во, выше качество и сила размытия, но более медленно)
	blurRadius# - задает радиус размытия
	quality% - качество размытия (значения только от 0 до 3)
		0 и 1 - очень быстрый метод, возможны артефакты на некоторых видеокартах (0 - нормальное качество, 1 - высокое качество)
		2 и 3 - более медленный метод, гарантированно без артефактов, а также может работать быстрее на некоторых видеокартах (2 - нормальное качество, 3 - высокое качество)
        red%, green%, blue% - цветовой оттенок эффекта, заничения 0...255 (как в функции BrushColor)
        alphaTexture% - текстура с альфа-каналом (загруженная с флагом 2) для дополнительной/частичной настройки прозрачности эффекта
	Пример использования: FastExt_PostprocessBlurDirectional.bb


CustomPostprocessBlurZoom% (x#=0.5, y#=0.5, zoomFactor#=105, alpha#=1, blurPasses%=4, quality%=1, red%=255, green%=255, blue%=255, alphaTexture%=0)
	Настройка параметров постпроцесс эффекта "Zoom-Blur".
	x#, y# - координаты центра эффекта (например 0,0 - верхний-левый угол; 1,1 - нижний-правый угол)
	zoomFactor# - коэффициент увеличения в процентах (100 - без увеличения, >100 - размытие наружу, <100 - размытие внутрь центра)
	alpha# - непрозрачность эффекта, минимальное значение 0 - полностью прозрачный, 1 - полностью НЕпрозрачный
	blurPasses% - кол-во размывающих проходов (больше кол-во, выше качество и сила размытия, но более медленно)
	quality% - качество размытия (значения только от 0 до 3)
		0 и 1 - очень быстрый метод, возможны артефакты на некоторых видеокартах (0 - нормальное качество, 1 - высокое качество)
		2 и 3 - более медленный метод, гарантированно без артефактов, а также может работать быстрее на некоторых видеокартах (2 - нормальное качество, 3 - высокое качество)
        red%, green%, blue% - цветовой оттенок эффекта, заничения 0...255 (как в функции BrushColor)
        alphaTexture% - текстура с альфа-каналом (загруженная с флагом 2) для дополнительной/частичной настройки прозрачности эффекта
	Пример использования: FastExt_PostprocessBlurZoom.bb


CustomPostprocessBlurSpin% (x#=0.5, y#=0.5, spinAngle#=4, alpha#=1, blurPasses%=4, quality%=1, red%=255, green%=255, blue%=255, alphaTexture%=0)
	Настройка параметров постпроцесс эффекта радиального размытия "Spin-Blur".
	x#, y# - координаты центра эффекта (например 0,0 - верхний-левый угол; 1,1 - нижний-правый угол)
	spinAngle# - угол поворота размытия в градусах (0 - без поворота, >0 - с поворотом и размытием)
	alpha# - непрозрачность эффекта, минимальное значение 0 - полностью прозрачный, 1 - полностью НЕпрозрачный
	blurPasses% - кол-во размывающих проходов (больше кол-во, выше качество и сила размытия, но более медленно)
	quality% - качество размытия (значения только от 0 до 3)
		0 и 1 - очень быстрый метод, возможны артефакты на некоторых видеокартах (0 - нормальное качество, 1 - высокое качество)
		2 и 3 - более медленный метод, гарантированно без артефактов, а также может работать быстрее на некоторых видеокартах (2 - нормальное качество, 3 - высокое качество)
        red%, green%, blue% - цветовой оттенок эффекта, заничения 0...255 (как в функции BrushColor)
        alphaTexture% - текстура с альфа-каналом (загруженная с флагом 2) для дополнительной/частичной настройки прозрачности эффекта
	Пример использования: FastExt_PostprocessBlurSpin.bb


CustomPostprocessBlurMotion (alpha#=0.9, originX#=0, originY#=0, handleX#=0.5, handleY#=0.5, scaleX#=100, scaleY#=100, angle#=0, blend%=0, red%=255, green%=255, blue%=255, alphaTexture%=0)
	Настройка параметров постпроцесс эффекта радиального размытия "Motion-Blur".
	alpha# - непрозрачность эффекта, минимальное значение 0 - полностью прозрачный, 1 - полностью НЕпрозрачный
	originX#, originY# - координаты motion-blur квада (пример 0,0 - верхний-левый угол; 1,1 - нижний-правый угол)
	handleX#, handleY# - координаты центра эффекта, эффективно при изменении параметров scaleX#, scaleY# и angle#
		(пример 0,0 - верхний-левый угол; 1,1 - нижний-правый угол)
	scaleX#, scaleY# - коэффициент увеличения/уменьшения в процентах (100 - без увеличения, >100 - размытие наружу, <100 - размытие внутрь центра)
	angle# - угол поворота размытия в градусах (0 - без поворота, >0 - с поворотом и размытием)
	blend% - метод наложения эффекта, возможные значения:
		0 - alpha blend (только прозрачность эффекта)
		1 - add blend (сложение + прозрачность)
		2 - multiply blend (умножение + прозрачность)
	red%, green%, blue% - цветовой оттенок эффекта, заничения 0...255 (как в функции BrushColor)
	alphaTexture% - текстура с альфа-каналом (загруженная с флагом 2) для дополнительной/частичной настройки прозрачности эффекта
	Пример использования: FastExt_PostprocessBlurMotion.bb


CustomPostprocessOverlay% (alpha#=0.5, method%=0, red%=255, green%=255, blue%=255, alphaTexture%=0)
	Настройка параметров простого постпроцесс эффекта наложения "Overlay".
	alpha# - непрозрачность эффекта, минимальное значение 0 - полностью прозрачный, 1 - полностью НЕпрозрачный
	method% - возможные значения от 0 до 2
		0 - ALPHA BLEND
		1 - ADD  (like Blitz blend)
		2 - MULTIPLY (like Blitz blend)
        red%, green%, blue% - цветовой оттенок эффекта, заничения 0...255 (как в функции BrushColor)
        alphaTexture% - текстура с альфа-каналом (загруженная с флагом 2) для дополнительной/частичной настройки прозрачности эффекта
	Пример использования: FastExt_PostprocessOverlay.bb 


CustomPostprocessRays% (x#=0.5, y#=0.5, zoomFactor#=105, alpha#=1, darkPasses%=2, blurPasses%=4, quality%=1, red%=255, green%=255, blue%=255, alphaTexture%=0)
	Настройка параметров постпроцесс эффекта 'GodRays'.
	x#, y# - координаты центра эффекта (например 0,0 - верхний-левый угол; 1,1 - нижний-правый угол)
	zoomFactor# - коэффициент увеличения в процентах (100 - без увеличения, >100 - размытие наружу, <100 - размытие внутрь центра)
	alpha# - непрозрачность эффекта, минимальное значение 0 - полностью прозрачный, 1 - полностью НЕпрозрачный
	darkPasses% - кол-во затемняющих проходов:
		0 - максимальное свечение, светится все что можно :)
		2 и более - светятся только яркие части изображения
	blurPasses% - кол-во размывающих проходов (больше кол-во, выше качество и сила размытия, но более медленно)
	quality% - качество размытия (значения только от 0 до 3)
		0 и 1 - очень быстрый метод, возможны артефакты на некоторых видеокартах (0 - нормальное качество, 1 - высокое качество)
		2 и 3 - более медленный метод, гарантированно без артефактов, а также может работать быстрее на некоторых видеокартах (2 - нормальное качество, 3 - высокое качество)
        red%, green%, blue% - цветовой оттенок эффекта, заничения 0...255 (как в функции BrushColor)
        alphaTexture% - текстура с альфа-каналом (загруженная с флагом 2) для дополнительной/частичной настройки прозрачности эффекта
	Пример использования: FastExt_PostprocessRays.bb


CustomPostprocessRaysEx% (lightPasses%, lightMethod%)
	Настройка дополнительных параметров постпроцесс эффекта 'GodRays'.
	lightPasses% - количество осветляющих проходов (0-отключено, 6-максимальное осветление)
	lightMethod% - метод наложения для осветления, возможные значения от 0 до 5:
		0 - MODULATE (бленд как в Blitz3D)
		1 - MODULATE2X
		2 - MODULATE4X
		3 - ADDSIGNED
		4 - ADDSIGNED2X
		5 - ADD (бленд как в Blitz3D)




* ДОПОЛНЯЮЩИЕ ФУНКЦИИ:

ExecAndExit% ( file$, command$, workingDir$ )
	Функция запускает любую программу и принудительно закрывает текущую программу.
	Можно использовать для смены видео-разрешения посредством полного перезапуска программы.
	file$ - путь к программе для запуска (прямой или относительный)
		Если file$ это пустая строка, то будет запущена текущая программа.
	command$ - параметры командной строки для запускаемой программы.
	workingDir$ - этим параметром можно задать текущую рабочую директорию (папку) для запускаемой программы.
	Пример использования: FastExt_Example_ChangeResolutionOther.bb


FogMode% (mode%)
	Функция устанавливает глобальный режим тумана:
		1 - стандартный блицевский туман
		2 - табличный туман (экспоненциальный)
		3 - табличный туман (экспоненциальный, дистанция в степени 2)
	Режимы 2 и 3 предназначены для создания более реалистичного тумана, чем стандартный.
	Пример использования: FastExt_Example_FogModeAndDensity.bb


FogDensity% (density#)
	Функция устанавливает плотность тумана. Актуальна только для FogMode режимов 2 и 3.
	Пример использования: FastExt_Example_FogModeAndDensity.bb


TextureAnisotropy% (level%=0, index%=-1)
	Функция устанавливает уровень анизотропной фильтрации текстур, что повышает четкость их отображения.
	А также имеет возможность полность отключать фильтрацию.
	level% - уровень анизотропии или режим фильтрации текстур
		-2 - фильтрация и мипмаппинг полностью выключены
		-1 - фильтрация выключена, используется линейный мипмаппинг
		 0 - стандартная линейная фильтрация и мипмаппинг (как в Блиц3Д изначально)
		>0 - уровень анизотропной фильтрации (обычно используют значения 1...16).
		     Если уровень больше поддерживаемого видеокартой, то выставляется
		     максимально возможный, равный GfxDriverCapsEx\AnisotropyMax
	index% - текстурный слой, если равен -1, то выставляется для всех слоев
	Примеры использования: FastExt_Example_AnisotropyAndLodBias.bb и FastExt_Example_TextureFiltering.bb


TextureLodBias% (bias#=-0.2, index%=-1)
	Функция устанавливает уровень детализации текстур. Позволяет регулировать размытие\четкость текстур.	
	index% - текстурный слой, если равен -1, то выставляется для всех слоев
	Пример использования: FastExt_Example_AnisotropyAndLodBias.bb


SetCubeAlign% (texture%, entity%)
	Функция позволяет изменить ориентацию кубе-мап текстуры - повернуть ее на углы, которые имеет ентити.
	Благодаря этой функции можно сделать пиксельное освещение (диффузное и\или спекулярное) через кубе-мап
	текстуру, а также использовать для ориентации источника света при ДОТ3 бамп-маппинге.
	Пример использования FastExt_Example_SetCubeAlign.bb


CreateTexture% (width%, height%, flags%)
	Стандартная функция с новыми возможностями. Теперь можно задавать дополнительные флаги:
		FE_ExSIZE
			- позволяет задавать произвольные размеры текстуры (не кратные степени двойки), но
			  будьте аккуратны так как такие текстуры не будут тайлиться (повторяться), а также
			  могут не работать на очень старых видео-картах
		FE_RENDER
			- создает текстуру, пригодную для 2Д рендеринга (без буфера глубины), в которую может
			  рендерить библиотека FastImage или Блиц3Д. Используйте команду SetBuffer для установки
			  текстуры на рендеринг.
		FE_ZRENDER
			- создает текстуру, пригодную для 3Д рендеринга, в которую может корректно рендерить Блиц3Д
			  и библиотека FastImage. Используйте команду SetBuffer для установки текстуры на рендеринг.
			  Внимание! Такую текстуру при смене видео-разрешения следует удалить доработанной командой
			  FreeTexture (см. ниже), чтобы не было потери видео-памяти из-за буфера глубины. Если
			  смены видео-режима не предусмотрено, то можно не удалять, при выходе из программы
			  вся видео-память автоматически будет очищена.

	Можно создавать кубемап-текстуры для рендеринга - смотри пример FastExt_Example_RenderCubemap.bb

	Внимание! Не используйте новые флаги для анимированных текстур!
	Если текстура создана для рендеринга (флаги FE_RENDER или FE_ZRENDER), то перед сменой графического
	режима обязательно удалите текстуру с помошью функцию FreeTexture, чтобы удалить Z-буффер,
	прикрепленный к данной текстуре.

	Пример использования FastExt_Example_TextureCreateAndRender.bb и другие примеры. 


FreeTexture% (texture%)
	Стандартная функция, доработанная для удаления текстур, созданных для 3Д рендеринга (с флагом FE_ZRENDER).
	Следует очищать все 3Д текстуры данной командой только при смене видео-разрешения в вашем приложении,
	в остальных случаях не требуется.


TextureBlend% (texture%, blend_flags%)
	Стандартная функция с новыми возможностями. Теперь можно задавать новый флаги блендинга:
		FE_ALPHACURRENT - прозрачность предыдущей текстуры для текущей
		FE_ALPHAMODULATE - умножение прозрачности на текущую
		FE_BUMP - текстура искажений (обязательно требует еще одной текстуры на слое, выше данной)
		FE_BUMPLUM - текстура искажений + канал яркости (обязательно требует еще одной текстуры на слое, выше данной)
		FE_PROJECT - текстура накладывается как проекция (умножением)
		FE_PROJECTSMOOTH - текстура накладывается как проекция (плавным сложением)
		FE_MULTIPLY4X - умножение 4x
		FE_ADDSIGNED - сложение со знаком
		FE_ADDSIGNED2X - сложение со знаком 2x
		FE_ADDSMOOTH - плавное сложение
		FE_SUB - вычитает текстуры из предыдущей
		FE_SPECULAR0 - для спекулярного маппинга с учетом альфа-канала
		FE_SPECULAR1 - для спекулярного маппинга с учетом альфа-канала
		FE_SPECULAR2 - для спекулярного маппинга с учетом альфа-канала
		FE_SPECULAR3 - для спекулярного маппинга с учетом альфа-канала
	Данные или "свои" флаги можно устанавливать в готовых 3Д моделях, это будет отлично работать (см. пример FastExt_Example_BumpAnimMesh.bb)
	Новые флаги формируются из констант ДиектИкс D3DTOP_* (см. подключаемый файл include\FastExt.bb)
	следующим образом (в шестнадцатиричной системе) $00xxyyzz,
		где xx равен еденице, если текстура должны проецироваться (ноль - без проецирования)
		yy - D3DTOP_* константа цветового смешивания
		zz - D3DTOP_* константа альфа-смешивания, если равна нулю, то используется блицевское альфа-смешивание (если текстура была загружена с флагом 2, если нет, то альфа-смешивание будет отключено блицем)
	Для облегчения создания собственных блендов используйте функцию TextureBlendCustom (см. ниже)
	Пример использования FastExt_Example_TextureBlends.bb и другие.


TextureBlendCustom% (texture%, color_operation%, alpha_operation%=0, projection_flag%=0)
	Новая функция для облегчения создания собственных текстурных блендингов (смешиваний).
	color_operation% - D3DTOP_* константа цветового смешивания
	alpha_operation% - D3DTOP_* константа альфа-смешивания, если равна нулю, то используется блицевское
				альфа-смешивание (если текстура была загружена с флагом 2, если нет,
				то альфа-смешивание будет отключено блицем)
	projection_flag% - если равен единице, то текстура будет плоско проецироваться (автоматически генеряться
				новые текстурные координаты для нулевого текстурного набора координат)
	"Cвои" флаги можно устанавливать в готовых 3Д моделях, это будет отлично работать (см. пример FastExt_Example_BumpAnimMesh.bb)

	
Bump% (enable%=-1)
	Новая функция для ручного отключения\включения искажений (бампа, аналогично EMBM).
	Актуальна для текстур, имеющих бленд FE_BUMP или FE_BUMPLUM.
	Создана для отладки приложений и визуальной проверки приложения, если видеокарта не будет поддерживать искажения (бамп).
	Если enable% не задан, то возвращает текущие возможности видеокарты по поддержке искажений (бампа).
	Смотрите пример использования FastExt_Example_BumpWaterAndEntity.bb, FastExt_Example_BumpAnimMesh.bb и другие.


BumpPower% (power#)
	Функция задает глобальное значение силы искажений (бампа, аналогично EMBM).
	power# - сила, значение по умолчанию равно 0.1


SetBuffer% (buffer%)
	Теперь функция может установить текстурный буфер для рендеринга, если текстура создана
	с соответствующими флагами и предназначена для рендеринга. Смотрите описание команды CreateTexture.
	Пример использования FastExt_Example_TextureCreateAndRender.bb


CopyRectStretch% (src_x%, src_y%, src_width%, src_height%, dest_x%, dest_y%, dest_width%, dest_height%, src_buffer%, dest_buffer% )
	Функция позволяет копировать графические данные с любыми размерами источника и приемника,
	расширенный аналог стандартной функции CopyRect.
	Копирование в/из кубемап текстуры поддерживается.
	Пример использования FastExt_Example_CopyRectStretch.bb	


ClsColor% (red%, green%, blue%, alpha%=$FF, zValue#=1.0)
	Стандартная функция с новыми возможностями. Теперь можно задать величину прозрачности для очистки текстурного буффера,
	а также величину Z-буффера, если текстура предназначена для рендеринга.
	Пример использования FastExt_Example_TextureCreateAndRender.bb


Cls% (clearColor%=1, clearZBuffer%=1)
	Стандартная функция с новыми возможностями. Теперь можно задать флаги и очищать бэк-буффер или текстурный буффер
	опционально (отдельно буфер глубины, отдельно цвет или совместно все сразу).
	Пример использования FastExt_Example_TextureCreateAndRender.bb


EntityFX% (entity%, fx_flags%)
	Стандартная функция с новыми возможностями. Теперь можно задать флаги:
		FE_WIRE - рисовать только ребра данного объекта (линии)
		FE_POINT - рисовать только вершины данного объекта (точки)
	Пример использования FastExt_Example_EntityFX.bb


BrushFX% (brush%, fx_flags%)
	Стандартная функция с новыми возможностями. Теперь можно задать флаги:
		FE_WIRE - рисовать только ребра данного сюрфейса\объекта (линии)
		FE_POINT - рисовать только вершины данного сюрфейса\объекта (точки)
	Позволяет применять флаги к отдельным сюрфейсам объектов.
	Пример использования FastExt_Example_EntityFX.bb


EntityBlend% (entity%, blend_flags%)
BrushBlend% (brush%, blend_flags%)
	Стандартные функции с новыми возможностями. Теперь можно задать новые флаги для рендеринга объектов\сюрфейсов:
		FE_INVALPHA - инвертировать альфа-составляющую
		FE_INVCOLOR - инвертировать цветовую составляющую
		FE_INVCOLORADD - инвертировать цветовую составляющую и рендерить сложением 
		FE_NOALPHA - принудительно отключание прозрачности объекта.
	Пример использования FastExt_Example_EntityBlends.bb


EntityBlendCustom% (entity%, source_blend%=1, destination_blend%=1, alphablending_enable%=0)
BrushBlendCustom% (brush%, source_blend%=1, destination_blend%=1, alphablending_enable%=0)
	Новые функции, позваоляющие делать свои уникальные блендинги для объектов\сюрфейсов используя
	ДиректИкс константы D3DBLEND_* (см. подключаемый файл include\FastExt.bb)
	source_blend% - D3DBLEND_* константа смешивания источника
	destination_blend% - D3DBLEND_* константа смешивания приемника
	alphablending_enable% - должен быть равен еденице, чтобы включить смешивание (блендинг)


ColorFilter% (red%=1, green%=1, blue%=1, alpha%=1)
	Новая функция. Позволяет отключать цветовые каналы при рендеринге изображения.
	Можно сделать некоторые эффекты (например эффект ночного видения или анаглиптику для стерео-очков) 
	сразу для всей сцены не используя дополнительного рендеринга.
	Пример использования FastExt_Example_ColorFilter.bb


MirrorCamera% (camera%=0, entity%=0)
	Вспомогательная функция, позволяющая отразить камеру\объект относительно плоскости.
	Удобна для создания текстуры отражения водяной поверхности (плоскости).
	Смотрите примеры FastExt_Example_Water*.bb


RestoreCamera% (camera%=0)
	Вспомогательная функция, возвращает положение камеры\объекта в исходное после команды
	MirrorCamera (см. выше).
 

ParentEntity% (entity%)
	Дополнительная и вспомогательная функция, позволяет получить родителя объекта.
	Если возвращает ноль, то объект не имеет родителя.




* ДОПОНИТЕЛЬНЫЕ ФУНКЦИИ ДЛЯ РЕНДЕРИНГА:

RenderEntity% (entity%, camera%, clearViewport%=0, tween#=1.0 )
	Функция рендерит любой меш. Если меш содержит чилдов, то они тоже будут отрендерены.
	Если меш скрыт, то скрытие будет автоматически отключено, а после рендеринга восстановлено.
	camera% - камера для рендеринга.
		Если скрыта, то рендеринга не будет.
		Если камера отключена (CameraProjMode=0), то она будет автоматически включена, будет выставлен CameraProjMode=1
	clearViewport% - параметр, определяющий очистку экрана в процессе рендеринга, возможные значения:
		0 - очистка отключена, объект рендерится поверх текущей графики
		1 - полная очистка цвета и буфера глубины
		2 - используются настройки камеры CameraClsMode
	tween# - используется для твининга, аналогичен параметру функции RenderWorld
	Пример использования: FastExt_Example_RenderEntity

RenderEntityLight% (number%, light%)
	Функция устанавливает источники света light% для функции RenderEntity.
	По умолчанию источники света отсутствуют и объект будет рендерится без освещения (влияет только AmbientColor).
	number% - номер источника света от 0 до 7.
	Если требуется убрать какой либо источник света, то задавайте параметру light% значение ноль,
	а параметру number% - номер источника.
	Пример использования: FastExt_Example_RenderEntity


RenderGroup% (group%, camera%, clearViewport%=0, tween#=1.0 )
	Функция рендерит группу ентитей (с чилдами, если чилды есть в наличии и не скрыты).
	Видимость всех ентитей в группе будет автоматически включена (только первый уровень иерархии, видимость чилдов
	не будет изменена) и также автоматически восстановлена после рендеринга.
	group% - любое целочисленное значение, использует как идентификатор группы.
	camera% - камера для рендеринга.
		Если скрыта, то рендеринга не будет.
		Если камера отключена (CameraProjMode=0), то она будет автоматически включена, будет выставлен CameraProjMode=1
	clearViewport% - параметр, определяющий очистку экрана в процессе рендеринга, возможные значения:
		0 - очистка отключена, объект рендерится поверх текущей графики
		1 - полная очистка цвета и буфера глубины
		2 - используются настройки камеры CameraClsMode
	tween# - используется для твининга, аналогичен параметру функции RenderWorld
	Пример использования: FastExt_Example_RenderGroup.bb 


GroupAttach% (group%, entity%)
	Добавляет ентити entity% в группу.
	group% - любое целочисленное значение, использует как идентификатор группы.
	Возвращает ноль, если ентити уже присутствует в группе, в противном случае - не ноль.
	Пример использования: FastExt_Example_RenderGroup.bb 


GroupDetach% (group%, entity%)
	Убирает ентити entity% из группы.
	group% - любое целочисленное значение, использует как идентификатор группы.
	Возвращает ноль, если ентити уже присутствует в группе, в противном случае - не ноль.
	Пример использования: FastExt_Example_RenderGroup.bb 


GroupChange% (group%, entity%)
	Задать новую группу group% для ентити entity%.
	Полезная функция для перемещения ентити из одной группы в другую или для временного
	удаления из группы. Возвращает ноль, если ентити не присоединен ни к одной из групп.
	Или не ноль, если удалось задать новую группу.


GroupFind% (group%, entity%)
	Проверяет наличие ентити entity% в группе.
	group% - любое целочисленное значение, использует как идентификатор группы.
	Возвращает ноль, если ентити уже присутствует в группе, в противном случае - не ноль.

	
ClearGroup% (group%)
	Убирает ВСЕ ентити из группы.
	group% - любое целочисленное значение, использует как идентификатор группы.


ClearGroups% ()
	Убирает ВСЕ ентити из ВСЕХ существующих групп.




* ФУНКЦИИ ДЛЯ РАБОТЫ С КЛИП-ПЛЕЙНАМИ (ПЛОСКОСТЯМИ ОТСЕЧЕНИЯ):


CreateClipplane% (entity%=0,  x1#=0, y1#=0, z1#=0,  x2#=0, y2#=0, z2#=1,  x3#=1, y3#=0, z3#=0)
	Новая функция, создает плоскость отсечения, возвращает клип-плейн (или ноль если создать не удалось).
	Если задан entity%, то выравнивает клип-плейн по плоскости XZ объекта, если равен нулю, то
	выравнивает по трем точкам в пространстве (координаты задаются параметрами x1, y1, z1,  x2, y2, z2,  x3, y3, z3).
	Без этой функции невозможно создать правильное отражение на водной поверхности (или зеркальной поверхности).
	Пример использования FastExt_Example_ClipPlanes.bb
	Внимание! При использовании учитывайте следующие факторы:
		1. Проверяйте поддержку клип-плейнов через свойство GfxDriverCapsEx\ClipplanesMax (см. ниже) 
		2. Старые видео-карты, особенно NVidia, поддерживают только 1-2 клип-плейна, старайтесь пользоваться
		   минимальным количеством (лучше вообще одним).
		3. Функция не позволит создать более 4-х клип-плейнов, так задумано и это правильно.


AlignClipplane% (plane%,  entity%=0,  x1#=0, y1#=0, z1#=0,  x2#=0, y2#=0, z2#=1,  x3#=1, y3#=0, z3#=0)
	Новая функция, выравнивает клип-плейн (плоскость отсечения) по объекту или трем точкам.
	Если задан entity%, то выравнивает клип-плейн по плоскости XZ объекта, если равен нулю, то
	выравнивает по трем точкам в пространстве (координаты задаются параметрами x1, y1, z1,  x2, y2, z2,  x3, y3, z3).
	Пример использования FastExt_Example_ClipPlanes.bb


HideClipplane% (clipplane%)
	Новая функция, отключает клип-плейн.


ShowClipplane% (clipplane%)
	Новая функция, включает клип-плейн.


FreeClipplane% (clipplane%)
	Новая функция, удаляет клип-плейн.


FreeClipplanes% ()
	Новая функция, удаляет все клип-плейны разом. Удобна при очистке всей сцены и смене видеорежима.



            
* ПОЛУЧЕНИЕ СВОЙСТВ ВИДЕОКАРТЫ:

GfxDriverCapsEx
	С помошью глобальной переменной (типизированной) можно получить следующие свойства видеокарты:
		BrushBlendsSrc%
		BrushBlendsDest%
		TextureCaps%
		TextureBlends%
		TextureMaxStages%
		TextureMaxWidth%
		TextureMaxHeight%
		TextureMaxAspectRatio%
		ClipplanesMax%
		LightsMax%
		Bump%
		BumpLum%
		AnisotropyMax%
	Они пригодятся для проверки поддержки видео-картой клип-плейнов, текстурных искажений (бамп),
	текстурных смешиваний и смешиваний при рендеринге объектов\сюрфейсов.
	Смотрите пример использования FastExt_Example_GfxDriverCapabilities.bb



