
* PROJECTIVE SHADOWS:

Shade in library are presented two included files ShadowsSimple.bb and ShadowsMultiple.bb

ShadowsSimple.bb - this is a most simple system of the shadows, having one shadow map (texture),
which possible place on receivers - any meshes, on which will fall shadows. This system more compact
and more simple for understanding, than second, but allows to do only simple shadowing.
Examples of use: all ShadowsSimple_*.bb files.

ShadowsMultiple.bb - it's more advanced system, in which possible create any amount of the shadow systems.
Each shadow system has its shadow map and set of the casters - any meshes. Maximum amount of the casters
to one shadow system is defined by constant ShadowCastersMax = 2048, if this little, that can assign
greater number, having changed value of the constant in source file ShadowsMultiple.bb Any caster
can belong to one of the shadow systems or immediately several, that enables to create the more
interesting effects and create pseudo self-shadowing.
Examples of use: all ShadowsMultiple_*.bb files.
	other examples from ShadowSimple framework you can easily adapt for ShadowMultiple framework.

The functional set in both systems alike, but for ShadowsMultiple.bb nearly in all function is used
additional parameter - a pointer to shadow system, see more details in functions description.


Features:

	- This shadows possible use in real projects (games), created on Blitz3D due to their speed.
	  All other variants of the shadows can not give acceptable FPS in real projects, IMHO.

	- Maximum speed of the work, it is used additional rendering only for casters.
	  Projection of the shadow map occurs through DirectX7, without any additional calculation
	  for each vertex in the meshes.

	- The caster and receiver can be absolutely any mesh (software created mesh, animated mesh, terrain, etc.)

	- System correct displays shadows from casters, containing transparent or masked textures
	  (glass, grass, branches of the tree, fence from iron net and etc.)

	- There is possibility of the increase perfomance of the system. You can use low-poly copy of the original
	  meshes as casters.


Restrictions:

	- Impossible to create real self-shadowing.

	- Projection of the shadow spreads on whole receiver (front and back faces),
	  see pictures from path .\images\shadow0.gif and .\images\shadow1.gif

	- Wrong to place part of the caster (or whole caster) inside receiver. Such situation it is necessary to avoid,
	  see pictures from path .\images\shadow2.gif and see example ShadowsSimple_ReceiversUse.bb - it will help you
	  to solve a problem (not completely, only partially)

	- Shadow system support directional an spot lights only. If you want to have less problems with indoor scenes, 
	  see pictures from path .\images\shadow3.gif


Recommendations:

	- Use classical lightmaps for all static objects
	- Use dynamic shadows for dynamic objects only
	- System of the shadows - not instrument for decision of all problems, use it neatly!


Functions:	


CreateShadow (quality%=1, mode%=1)
	This function create shadow system (single for ShadowsSimple.bb or new copy for ShadowsMultiple.bb).
	Parameter quality% can have possible values:
		0 - size of the shadow map (texture) will be 512x512 pixels (1 MB in video memory)
		1 - size 1024x1024 pixels (4 MB) 
		2 - size 2048x2048 pixels (16 MB)
		Size is automatically limited under maximum size of the texture, supported in video card.

	Parameter mode% can have possible values:
		0 - shadow system use render-to-texture method (to shadow map).
		1 - use render to BackBuffer and CopyRect to shadow map. Maximum stability on very old videocards,
		    but it more slow and size of the shadow map limited by current graphics resolution.
		    (as example - if graphic resolution 1024x768, then size of the shadow map will be 512x512)
		
	Function return:
		- nothing for ShadowsSimple.bb or
		- shadow system object with 'Shadow' type for ShadowsMultiple.bb for the subsequent use


UpdateShadows% (camera%, tween#=1.0)
	Main function, update all shadow system and render casters to shadow map.
	Use this function before RenderWorld (and after UpdateWorld).
	Parameter:

		camera% - main camera in your scene (from which the spectator sees). It is possible
			to set any other entity if it is required, but it is necessary to remember
			that the shadow map will be will extend concerning this entity.
		tween# - use for tweening, analogue tween param from RenderWorld

	It is possible to cause function less often, than each frame, if objects move slightly or not move.


ShadowLight% (light_entity%=-1)   - for ShadowsSimple.bb
ShadowLight% (ShadowIn.Shadow, light_entity%=-1)   - for ShadowsMultiple.bb
	Function sets a light source through parametre light_entity % from which shadows will be projected.
	Any entity can be a light source. The object direction in space is used only, the system supports
	only the directional light sources.
	If the parametre light_entity% is not set or equal -1 function will return flowing source light,
	currently used in system.


ShadowOffset (x#=0, y#=0, z#=0)   - for ShadowsSimple.bb
ShadowOffset (ShadowIn.Shadow, x#=0, y#=0, z#=0)   - for ShadowsMultiple.bb
	Function set offset for shadows
	Function sets shadow offset (displacement) in space if the shade lays down roughly on a receiver.
	This function can be demanded in certain cases, all depends on the form and a mesh (receiver) grid.


ShadowFade% (fadeTexture%=-1)   - for ShadowsSimple.bb
ShadowFade% (ShadowIn.Shadow, fadeTexture%=-1)    - for ShadowsMultiple.bb
	By means of this function it is possible to set a texture of smooth display of shadows (fade out)
	on border of a shadow range. Set your texture through parametre fadeTexture%.
	If the parametre is not set or equal -1, that function will return a current texture or a zero
	if the texturee has not been set earlier. By default such texturee is not set also shades vanish
	and appear sharply on border.
	See examples: ShadowsSimple_FadeOut.bb, ShadowsMultiple_FadeOut.bb 


ShadowColor# (r#=255, g#=255, b#=255)   - for ShadowsSimple.bb
ShadowColor# (ShadowIn.Shadow, r#=255, g#=255, b#=255)    - for ShadowsMultiple.bb
	Function sets color tone for a shadow. I recommend to set "cold" tone of a shadow
	if illumination on a scene in "warm" tones, it is more realistic looks, as in the nature the same law operates.
	By default colour tone of a shadow neutral (255,255,255).


ShadowPower# (power#=-1)   - for ShadowsSimple.bb
ShadowPower# (ShadowIn.Shadow, power#=-1)    - for ShadowsMultiple.bb
	Function sets opacity (power) of a shadow by means of parametre power#.
	If the parametre power# is not set or equal -1 function will return current value of power of a shade.
	By default the transparency is equal 50 % (power#=0.5)


ShadowRange# (range#=-1)   - for ShadowsSimple.bb
ShadowRange# (ShadowIn.Shadow, range#=-1)    - for ShadowsMultiple.bb
	Function sets a range of action of a shadow in space by means of parametre range#.
	Behind borders of this range of a shadow from casters will not be displayed.
	It is necessary to consider - the more a range, the the big area of a scene will be covered with a shadow,
	but there will be more low a quality of a shadows (more pixelate).
	If the parametre range# is not set or equal -1 function will return a current range of the shadow system.
	By default range# is equal 50.


ShadowTexture% ()   - for ShadowsSimple.bb
ShadowTexture% (ShadowIn.Shadow)    - for ShadowsMultiple.bb
	Function returns a shadow map (texture) which it is necessary to place on all receivers
	(on uppermost not used layer of mesh).


ShowShadow% ()    - for ShadowsSimple.bb
ShowShadow% (ShadowIn.Shadow)    - for ShadowsMultiple.bb
	Function enable show and an update of shadow system (if it has been hidden earlier).


HideShadow% ()    - for ShadowsSimple.bb
HideShadow% (ShadowIn.Shadow)    - for ShadowsMultiple.bb
	Function hides display and an update of shadow system (if it has been showed earlier).


DebugShadow% (x%=0, y%=0, width%=256, height%=256)   - for ShadowsSimple.bb
DebugShadow% (ShadowIn.Shadow, x%=0, y%=0, width%=256, height%=256)    - for ShadowsMultiple.bb
	Function is used for debugging and allows to see on the screen a shadow map (texture).
	You can set position and size with params.


ShadowBlur% (alpha#=1.0, blurPass%=4, blurRadius#=0.1, quality%=0)
ShadowBlur% (ShadowIn.Shadow, alpha#=1.0, passes%=4, radius#=0.1, quality%=0)
	This function can enable or disable blur FX for shadow map.
	alpha# - alpha value for blur FX ( alpha>0 - enable blur FX, alpha=0 - disable blur FX)
	blurPass% - quantity of blur passes
	blurRadius$ - blur radius
	quality% - quality for blur FX
		0 and 1 - fast method (0 - low quality, 1 - high quality), with small artifacts on some videocards
		2 and 3 - normal method without artifacts (2 - normal quality, 3 - very high quality)
	Example of use: ShadowsSimple_PostBlur.bb


ShadowUpdate% (ShadowIn.Shadow, enable%=-1)
	Only for ShadowsMultiple.bb. Function allows enable/disable an update (shadowmap) for single shadow in multiple-shadow system.
		enable% = -1 - return current update-flag for shadow (default value = 1)
		enable% = 0 - disable update for shadow
		enable% = 1 - enable update for shadow
	Example of use: ShadowsMultiple_Demo.bb


FreeShadows% ()
	If the shadow system is not necessary any more it is possible to remove it by means this function,
	it should be used before such functions as ClearWorld and DeInitExt.
	Attention! If your program deletes shadow system, but continues to work, it is necessary to remember - 
	what is the textures will not be removed (and will occupy video memory) until you do not remove them
	from all receivers or remove receivers (meshes).



* FUNCTIONS FOR SHADOW CASTERS:

CreateShadowCaster% (caster_entity%, showAuto%=0, showAlways%=0)   - for ShadowsSimple.bb
CreateShadowCaster% (ShadowIn.Shadow, caster_entity%, showAuto%=0, showAlways%=0)    - for ShadowsMultiple.bb
	Create shadow caster from entity (caster_entity%).
	showAuto% - if you use LOD entity as caster (hidden in 3d world). Automatically show entity before updating shadow map, and hide after.
	showAlways% - use for entities not having culling box (planes, sprites and etc.) This caster will be always drawn,
	even if it is outside of a shadow map.
	Some AnimMeshes can cause problem (from them will not fall shadow). In such events we recommend
	to create Pivot and set it as parent for AnimMesh, afterwards - set Pivot as shadow caster.
	Function returns nothing.


HideShadowCaster% (caster_entity%)   - for ShadowsSimple.bb
HideShadowCaster% (ShadowIn.Shadow, caster_entity%)    - for ShadowsMultiple.bb
	Disable shadow casting from the caster (caster_entity%).
	The caster does not deleted from system. It is faster that delete from shadow system and create it after.


ShowShadowCaster% (caster_entity%)   - for ShadowsSimple.bb
ShowShadowCaster% (ShadowIn.Shadow, caster_entity%)    - for ShadowsMultiple.bb
	Enable shadow casting from the caster (caster_entity%).


FreeShadowCaster% (caster_entity%)   - for ShadowsSimple.bb
FreeShadowCaster% (ShadowIn.Shadow, caster_entity%)    - for ShadowsMultiple.bb
	Delete shadow caster (caster_entity%) from shadow system.


FindShadowCaster% (caster_entity%)   - for ShadowsSimple.bb
FindShadowCaster% (ShadowIn.Shadow, caster_entity%)    - for ShadowsMultiple.bb
	By means of function it is possible to learn, whether there is a given entity (caster_entity%) at shadow system.
	If function return -1, the entity is absent in system (is not connected).



* FUNCTIONS FOR SHADOW RECEIVERS:

AttachShadowReceiver% (receiver_entity%, showAuto%=0, showAlways%=0)   - for ShadowsSimple.bb
AttachShadowReceiver% (ShadowIn.Shadow, receiver_entity%, showAuto%=0, showAlways%=0)   - for ShadowsMultiple.bb
	Attach receiver_entity% to shadow system.
	If caster is located inwardly receivers or is intersected with receivers
	then use this function for dispose of false shadows.
	showAuto% - if you use LOD entity as receiver (hidden in 3d world). Automatically show entity before updating shadow map, and hide after.
	showAlways% - use for entities not having culling box (planes, sprites and etc.) This receiver will be always drawn,
	even if it is outside of a shadow map.
	Function returns nothing.
	Example of use: ShadowsSimple_ReceiversUse.bb 


ShowShadowReceiver% (receiver_entity%)   - for ShadowsSimple.bb
ShowShadowReceiver% (ShadowIn.Shadow, receiver_entity%)   - for ShadowsMultiple.bb
	Enable receiver_entity% in shadow system.
	

HideShadowReceiver% (receiver_entity%)   - for ShadowsSimple.bb
HideShadowReceiver% (ShadowIn.Shadow, receiver_entity%)   - for ShadowsMultiple.bb
	Disbale receiver_entity% in shadow system.
	The receiver does not deleted from system. It is faster that delete from shadow system and create it after.


FreeShadowReceiver% (receiver_entity%)   - for ShadowsSimple.bb
FreeShadowReceiver% (ShadowIn.Shadow, receiver_entity%)   - for ShadowsMultiple.bb
	Delete receiver_entity% from shadow system.


FindShadowReceiver% (receiver_entity%)   - for ShadowsSimple.bb
FindShadowReceiver% (ShadowIn.Shadow, receiver_entity%)   - for ShadowsMultiple.bb
	By means of function it is possible to learn, whether there is a given entity (receiver_entity%) at shadow system.
	If function return -1, the entity is absent in system (is not connected).



